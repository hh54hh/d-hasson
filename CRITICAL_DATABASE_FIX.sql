-- CRITICAL FIX: ุฅุตูุงุญ ูุดุงูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ููุธุงู ุงููุจูุนุงุช
-- ูุฐุง ุงูููู ูุญู ุงููุดุงูู ุงูุชุงูู๏ฟฝ๏ฟฝ:
-- 1. ุนุฏู ุธููุฑ ุงููุดุชุฑูุงุช ูู ูุดู ุญุณุงุจ ุงูุฒุจูู
-- 2. ุนุฏู ุชูููู ุงููุฎุฒู ุนูุฏ ุงูุจูุน
-- 3. ุนุฏู ูุฌูุฏ ุฌุฏูู sale_items

-- ุชูููู UUID ุฅุฐุง ูู ููู ููุฌูุฏ
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- =========================
-- 1. ุฅูุดุงุก ุฌุฏูู sale_items ุงูููููุฏ
-- =========================
CREATE TABLE IF NOT EXISTS sale_items (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    sale_id UUID NOT NULL,
    product_id UUID NOT NULL,
    product_name TEXT NOT NULL,
    quantity INTEGER NOT NULL CHECK (quantity > 0),
    unit_price DECIMAL(10,2) NOT NULL CHECK (unit_price >= 0),
    total_amount DECIMAL(10,2) NOT NULL CHECK (total_amount >= 0),
    profit_amount DECIMAL(10,2) DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- =========================
-- 2. ุฅุถุงูุฉ ุงูุนูุงูุงุช ุงููุทููุจุฉ
-- =========================
DO $$
BEGIN
    -- ุนูุงูุฉ ูุน ุฌุฏูู ุงููุจูุนุงุช
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.table_constraints
        WHERE constraint_name = 'sale_items_sale_id_fkey'
    ) THEN
        ALTER TABLE sale_items
        ADD CONSTRAINT sale_items_sale_id_fkey
        FOREIGN KEY (sale_id) REFERENCES sales(id) ON DELETE CASCADE;
    END IF;

    -- ุนูุงูุฉ ูุน ุฌุฏูู ุงูููุชุฌุงุช
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.table_constraints
        WHERE constraint_name = 'sale_items_product_id_fkey'
    ) THEN
        ALTER TABLE sale_items
        ADD CONSTRAINT sale_items_product_id_fkey
        FOREIGN KEY (product_id) REFERENCES products(id) ON DELETE CASCADE;
    END IF;
END $$;

-- =========================
-- 3. ุฅูุดุงุก ููุงุฑุณ ููุฃุฏุงุก
-- =========================
CREATE INDEX IF NOT EXISTS idx_sale_items_sale_id ON sale_items(sale_id);
CREATE INDEX IF NOT EXISTS idx_sale_items_product_id ON sale_items(product_id);
CREATE INDEX IF NOT EXISTS idx_sales_customer_id ON sales(customer_id);
CREATE INDEX IF NOT EXISTS idx_sales_sale_date ON sales(sale_date);

-- =========================
-- 4. ุชุญุฏูุซ ุฌุฏูู ุงููุจูุนุงุช
-- =========================
-- ุฅุถุงูุฉ ุนููุฏ ุนุฏุฏ ุงูููุชุฌุงุช ุฅุฐุง ูู ููู ููุฌูุฏ
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_name = 'sales' AND column_name = 'items_count'
    ) THEN
        ALTER TABLE sales ADD COLUMN items_count INTEGER DEFAULT 0;
    END IF;
END $$;

-- ุฅุฒุงูุฉ ุงูุฃุนูุฏุฉ ุงููุฏููุฉ ุงูุชู ูุง ูุญุชุงุฌูุง
DO $$
BEGIN
    -- ุฅุฒุงูุฉ product_id ูู ุฌุฏูู sales (ุงูุขู ูู sale_items)
    IF EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_name = 'sales' AND column_name = 'product_id'
    ) THEN
        ALTER TABLE sales DROP COLUMN product_id;
    END IF;

    -- ุฅุฒุงูุฉ product_name ูู ุฌุฏูู sales
    IF EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_name = 'sales' AND column_name = 'product_name'
    ) THEN
        ALTER TABLE sales DROP COLUMN product_name;
    END IF;

    -- ุฅุฒุงูุฉ quantity ูู ุฌุฏูู sales
    IF EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_name = 'sales' AND column_name = 'quantity'
    ) THEN
        ALTER TABLE sales DROP COLUMN quantity;
    END IF;

    -- ุฅุฒุงูุฉ unit_price ูู ุฌุฏูู sales
    IF EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_name = 'sales' AND column_name = 'unit_price'
    ) THEN
        ALTER TABLE sales DROP COLUMN unit_price;
    END IF;
END $$;

-- =========================
-- 5. ุฅูุดุงุก ุงูุฏูุงู ุงููุทููุจุฉ
-- =========================

-- ุฏุงูุฉ ุชุญุฏูุซ ุนุฏุฏ ุงูููุชุฌุงุช ูู ุงูุจูุนุฉ
CREATE OR REPLACE FUNCTION update_sale_items_count()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'INSERT' OR TG_OP = 'UPDATE' THEN
        UPDATE sales
        SET items_count = (
            SELECT COUNT(*)
            FROM sale_items
            WHERE sale_id = NEW.sale_id
        )
        WHERE id = NEW.sale_id;
        RETURN NEW;
    ELSIF TG_OP = 'DELETE' THEN
        UPDATE sales
        SET items_count = (
            SELECT COUNT(*)
            FROM sale_items
            WHERE sale_id = OLD.sale_id
        )
        WHERE id = OLD.sale_id;
        RETURN OLD;
    END IF;
    RETURN NULL;
END;
$$ language 'plpgsql';

-- ุฏุงูุฉ ุชุญุฏูุซ ุงูุชุงุฑูุฎ
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = TIMEZONE('utc'::text, NOW());
    RETURN NEW;
END;
$$ language 'plpgsql';

-- ุฏุงูุฉ ุชุญุฏูุซ ูููุฉ ุงูููุชุฌ ุชููุงุฆูุงู ุนูุฏ ุงูุจูุน
CREATE OR REPLACE FUNCTION update_product_quantity_on_sale()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        -- ุชูููู ูููุฉ ุงูููุชุฌ
        UPDATE products 
        SET quantity = quantity - NEW.quantity,
            updated_at = TIMEZONE('utc'::text, NOW())
        WHERE id = NEW.product_id;
        
        -- ุงูุชุญูู ูู ุงููููุฉ ุงูุณุงูุจุฉ
        IF (SELECT quantity FROM products WHERE id = NEW.product_id) < 0 THEN
            RAISE EXCEPTION 'ุงููููุฉ ุบูุฑ ูุงููุฉ ููููุชุฌ: %', NEW.product_name;
        END IF;
        
        RETURN NEW;
    ELSIF TG_OP = 'UPDATE' THEN
        -- ุชุนุฏูู ูููุฉ ุงูููุชุฌ ุญุณุจ ุงููุฑู
        UPDATE products 
        SET quantity = quantity - (NEW.quantity - OLD.quantity),
            updated_at = TIMEZONE('utc'::text, NOW())
        WHERE id = NEW.product_id;
        
        -- ุงูุชุญูู ูู ุงููููุฉ ุงูุณุงูุจุฉ
        IF (SELECT quantity FROM products WHERE id = NEW.product_id) < 0 THEN
            RAISE EXCEPTION 'ุงููููุฉ ุบูุฑ ูุงููุฉ ููููุชุฌ: %', NEW.product_name;
        END IF;
        
        RETURN NEW;
    ELSIF TG_OP = 'DELETE' THEN
        -- ุฅุฑุฌุงุน ูููุฉ ุงูููุชุฌ
        UPDATE products 
        SET quantity = quantity + OLD.quantity,
            updated_at = TIMEZONE('utc'::text, NOW())
        WHERE id = OLD.product_id;
        RETURN OLD;
    END IF;
    RETURN NULL;
END;
$$ language 'plpgsql';

-- =========================
-- 6. ุฅูุดุงุก ุงููุดุบูุงุช (Triggers)
-- =========================

-- ูุดุบู ุนุฏุฏ ุงูููุชุฌุงุช
DROP TRIGGER IF EXISTS update_sale_items_count_trigger ON sale_items;
CREATE TRIGGER update_sale_items_count_trigger
    AFTER INSERT OR UPDATE OR DELETE ON sale_items
    FOR EACH ROW
    EXECUTE FUNCTION update_sale_items_count();

-- ูุดุบู ุชุญุฏูุซ ุงูุชุงุฑูุฎ
DROP TRIGGER IF EXISTS update_sale_items_updated_at ON sale_items;
CREATE TRIGGER update_sale_items_updated_at
    BEFORE UPDATE ON sale_items
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- ูุดุบู ุชุญุฏูุซ ูููุฉ ุงูููุชุฌ ุงูุชููุงุฆู
DROP TRIGGER IF EXISTS update_product_quantity_trigger ON sale_items;
CREATE TRIGGER update_product_quantity_trigger
    AFTER INSERT OR UPDATE OR DELETE ON sale_items
    FOR EACH ROW
    EXECUTE FUNCTION update_product_quantity_on_sale();

-- =========================
-- 7. ุชุญุฏูุซ ุงูุจูุงูุงุช ุงูููุฌูุฏุฉ
-- =========================

-- ุชุญุฏูุซ ุนุฏุฏ ุงูููุชุฌุงุช ูููุจูุนุงุช ุงูููุฌูุฏุฉ
UPDATE sales
SET items_count = COALESCE((
    SELECT COUNT(*)
    FROM sale_items
    WHERE sale_id = sales.id
), 0)
WHERE items_count IS NULL OR items_count = 0;

-- =========================
-- 8. ุฅุนุฏุงุฏุงุช ุงูุฃูุงู
-- =========================

-- ุชูููู Row Level Security ุฅุฐุง ูุงู ูุทููุจ
-- ALTER TABLE sale_items ENABLE ROW LEVEL SECURITY;

-- ููุญ ุงูุตูุงุญูุงุช ูููุณุชุฎุฏููู (ูู ุจุชุนุฏูููุง ุญุณุจ ุงูุญุงุฌุฉ)
-- CREATE POLICY "Enable all operations for anon users on sale_items" ON sale_items FOR ALL TO anon USING (true);

-- =========================
-- 9. ุงุฎุชุจุงุฑุงุช ุงูุชุญูู
-- =========================

-- ุชุญูู ูู ูุฌูุฏ ุงูุฌุฏุงูู
SELECT 'ุงุฎุชุจุงุฑ ุงูุฌุฏุงูู' as test_name,
       CASE
         WHEN COUNT(*) >= 4 THEN 'ูุฌุญ: ุฌููุน ุงูุฌุฏุงูู ููุฌูุฏุฉ โ'
         ELSE 'ูุดู: ุฌุฏุงูู ููููุฏุฉ โ - ูุชููุน 4ุ ููุฌูุฏ ' || COUNT(*)::text
       END as result
FROM information_schema.tables
WHERE table_schema = 'public'
  AND table_name IN ('sales', 'sale_items', 'customers', 'products');

-- ุชุญูู ูู ุงูุนูุงูุงุช
SELECT 'ุงุฎุชุจุงุฑ ุงูุนูุงูุงุช' as test_name,
       CASE
         WHEN COUNT(*) >= 2 THEN 'ูุฌุญ: ุงูุนูุงูุงุช ููุฌูุฏุฉ โ'
         ELSE 'ูุดู: ุนูุงูุงุช ููููุฏุฉ โ - ูุชููุน 2+ุ ููุฌูุฏ ' || COUNT(*)::text
       END as result
FROM information_schema.table_constraints AS tc
WHERE tc.constraint_type = 'FOREIGN KEY'
  AND tc.table_name = 'sale_items';

-- ุชุญูู ูู ูููู ุงูุฌุฏูู
SELECT 'ุงุฎุชุจุงุฑ ุงููููู' as test_name,
       CASE
         WHEN COUNT(*) >= 9 THEN 'ูุฌุญ: ูููู ุงูุฌุฏูู ุตุญูุญ โ'
         ELSE 'ูุดู: ุฃุนูุฏุฉ ููููุฏุฉ โ - ูุชููุน 9+ุ ููุฌูุฏ ' || COUNT(*)::text
       END as result
FROM information_schema.columns
WHERE table_name = 'sale_items'
  AND table_schema = 'public';

-- =========================
-- 10. ุฑุณุงูุฉ ุงููุฌุงุญ
-- =========================
SELECT '๐ ุชู ุฅุตูุงุญ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ!' as message,
       'ุงูุขู ูููู ุฅุฌุฑุงุก ุงููุจูุนุงุช ูุนุฑุถ ูุดูู ุงูุญุณุงุจ ุจุดูู ุตุญูุญ' as instruction,
       'ุชุฃูุฏ ูู ุชุดุบูู ูุฐุง ุงูุณูุฑูุจุช ูู ูุญุฑุฑ SQL ูู Supabase' as note;
